/**
 * Tool to generate Nmake Makefile
 */

#include <iostream>
#include <fstream>
#include <string>
#define RAPIDJSON_NOMEMBERITERATORCLASS
#include <rapidjson/document.h>
#include <rapidjson/error/en.h>
#include <filesystem>

namespace fs = std::filesystem;

enum class ECppStd
{
	CXX17,
};

static std::string ReadTextFile(const std::string& InFilename)
{
	std::string Line, Text;
	std::ifstream File(InFilename);
	if (!File.is_open())
	{
		std::cerr << "Failed to generate makefile !" << std::endl;
		exit(-1);
	}

	while (std::getline(File, Line))
	{
		Text += Line + "\n";
	}

	File.close();

	return Text;
}

int main()
{
    std::cout << "ZinoMakefileTool generating Makefile" << std::endl;

	/** Try read ZinoMakefile.json */
	std::string Json = ReadTextFile("ZinoMakefile.json");

	/** Parse Json */
	rapidjson::Document Document;
	if (Document.Parse(Json.c_str()).HasParseError())
	{
		std::cerr << GetParseError_En(Document.GetParseError()) << std::endl;
		return -1;
	}

	/** Parse JSON */
	std::string Target = Document["target"].GetString();

	std::vector<std::string> Includes;
	Includes.reserve(Document["includes"].Size());
	for(unsigned int i = 0; i < Document["includes"].Size(); ++i)
		Includes.push_back(Document["includes"][i].GetString());

	/** Get all .cpp files */
	std::vector<fs::path> Paths;
	for (auto& Path : fs::recursive_directory_iterator("./"))
	{
		if (Path.path().extension() == ".cpp")
			Paths.push_back(Path.path());
	}

	/** Out makefile */
	std::ofstream Output("Makefile", std::ios::ate);
	Output << "# Generated by ZinoMakefileTool" << std::endl << std::endl;
	
	/** Flags and compilers */
	Output << "CC=cl" << std::endl;
	Output << "CFLAGS=/JMC /Zc:twoPhase- /GS /W3 /Zc:wchar_t /ZI /Gm- /Od /sdl /Zc:inline /fp:precise /D \"_DEBUG\" /D \"_CONSOLE\" /D \"_UNICODE\" /D \"UNICODE\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd /MDd /std:c++17 /FC /EHsc /nologo /diagnostics:column ";
	for (const auto& Include : Includes)
		Output << "/I\"" << Include << "\" ";
	Output << std::endl; 

	/** Rules */
	Output << ".cpp.obj::" << std::endl;
	Output << "\t$(CC) $(CFLAGS) $<" << std::endl;

	Output << std::endl << std::endl;
	Output << "all: " << Target << std::endl << std::endl;
	Output << Target << ": ";
	for(auto& Path : Paths)
		Output << Path.replace_extension(".obj").generic_string() << " ";
	Output << std::endl; 
	Output << "\t$(LINK) $(LFLAGS) -out:" << Target <<" $**" << std::endl;

	Output.close();

	return 0;
}